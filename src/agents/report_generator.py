from typing import Dict, Any
from src.workflows.state_schemas import OverallState, FinancialMetrics, TaxSummary
from src.utils.supabase_client import supabase_client
from src.utils.logging import StructuredLogger
from src.config.settings import settings
import tempfile
import os
from datetime import datetime

logger = StructuredLogger()

def report_generator_agent(state: OverallState) -> Dict[str, Any]:
    """Generate and store consulting-grade narrative report"""
    trace_id = state.get("trace_id", "unknown")
    
    try:
        logger.log_agent_activity(
            "report_generator", "start_generation", trace_id
        )
        
        # Generate comprehensive report
        report_md = generate_comprehensive_report(state)
        
        # Store report in Supabase Storage
        report_path = None
        try:
            # Create temporary file
            with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as tmp_file:
                tmp_file.write(report_md)
                tmp_file_path = tmp_file.name
            
            # Upload to Supabase storage
            with open(tmp_file_path, 'rb') as file:
                client_id = state.get("client_id", "unknown")
                storage_path = f"{client_id}/{trace_id}/report.md"
                
                result = supabase_client.storage.from_(settings.storage_bucket).upload(
                    storage_path, file
                )
                
                if hasattr(result, 'error') and result.error:
                    raise Exception(f"Storage upload failed: {result.error}")
                
                report_path = storage_path
            
            # Clean up temp file
            os.unlink(tmp_file_path)
            
        except Exception as storage_error:
            logger.log_agent_activity(
                "report_generator", "storage_failed", trace_id,
                error=str(storage_error)
            )
        
        # Update final status in Supabase
        try:
            current_time = datetime.utcnow().isoformat()
            supabase_client.table("analyses").update({
                "status": "completed",
                "results": {
                    **state.get("results", {}),
                    "report_path": report_path,
                    "report_generated_at": current_time
                },
                "updated_at": current_time
            }).eq("id", trace_id).execute()
        except Exception as db_error:
            logger.log_agent_activity(
                "report_generator", "final_status_update_failed", trace_id,
                error=str(db_error)
            )
        
        logger.log_agent_activity(
            "report_generator", "generation_complete", trace_id,
            report_stored=report_path is not None
        )
        
        return {
            "final_report_md": report_md,
            "final_report_pdf_path": report_path,
            "charts": [],
            "workflow_phase": "report_generation_complete",
            "error_messages": []
        }

def generate_comprehensive_report(state: OverallState) -> str:
    """Generate a comprehensive financial analysis report"""
    transactions = state.get("transactions", [])
    financial_metrics = state.get("financial_metrics")
    tax_summary = state.get("tax_summary")
    data_quality_score = state.get("data_quality_score", 0)
    cleaning_summary = state.get("cleaning_summary", {})
    client_id = state.get("client_id", "Unknown Client")
    analysis_type = state.get("analysis_type", "financial_analysis")
    
    # Generate report timestamp
    report_date = datetime.utcnow().strftime("%B %d, %Y")
    
    report = f"""# Financial Analysis Report

**Client:** {client_id}  
**Analysis Type:** {analysis_type.replace('_', ' ').title()}  
**Report Date:** {report_date}  
**Generated by:** Ashworth Engine v2

---

## Executive Summary

This report provides a comprehensive analysis of {len(transactions)} financial transactions processed through our advanced AI-powered financial intelligence platform.

### Key Findings

"""
    
    # Add financial metrics summary
    if financial_metrics:
        report += f"""- **Total Revenue:** ${financial_metrics.total_revenue:,.2f}
- **Total Expenses:** ${financial_metrics.total_expenses:,.2f}
- **Gross Profit:** ${financial_metrics.gross_profit:,.2f}
- **Gross Margin:** {financial_metrics.gross_margin_pct:.1f}%

"""
    
    # Add tax summary if available
    if tax_summary:
        report += f"""- **Total Deductible Expenses:** ${tax_summary.total_deductible_expenses:,.2f}
- **Total Taxable Income:** ${tax_summary.total_taxable_income:,.2f}

"""
    
    # Data quality section
    report += f"""## Data Quality Assessment

**Overall Data Quality Score:** {data_quality_score}%

"""
    
    if cleaning_summary:
        summary = cleaning_summary.get('summary', {})
        report += f"""### Processing Summary
- **Records Processed:** {summary.get('records_processed', 0)}
- **Records Retained:** {summary.get('records_retained', 0)}
- **Retention Rate:** {summary.get('retention_rate', 0)}%
- **Corrections Made:** {summary.get('corrections_made', 0)}
- **Duplicates Removed:** {summary.get('duplicates_removed', 0)}

"""
    
    # Financial analysis section
    if financial_metrics:
        report += f"""## Financial Analysis

### Revenue and Expense Analysis

Our analysis reveals the following financial performance:

- **Revenue Generation:** The business generated ${financial_metrics.total_revenue:,.2f} in total revenue
- **Expense Management:** Total expenses amounted to ${financial_metrics.total_expenses:,.2f}
- **Profitability:** The gross profit margin of {financial_metrics.gross_margin_pct:.1f}% indicates {'strong' if financial_metrics.gross_margin_pct > 20 else 'moderate' if financial_metrics.gross_margin_pct > 10 else 'weak'} profitability

"""
        
        # Expense breakdown
        if financial_metrics.expense_by_category:
            report += "### Expense Categories\n\n"
            for category, amount in financial_metrics.expense_by_category.items():
                percentage = (float(amount) / float(financial_metrics.total_expenses) * 100) if financial_metrics.total_expenses > 0 else 0
                report += f"- **{category.replace('_', ' ').title()}:** ${amount:,.2f} ({percentage:.1f}% of total expenses)\n"
            report += "\n"
        
        # Pattern analysis
        if financial_metrics.pattern_matches:
            report += "### Transaction Patterns\n\n"
            patterns = financial_metrics.pattern_matches
            if 'vendor_count' in patterns:
                report += f"- **Vendor Diversity:** {patterns['vendor_count']} unique vendors identified\n"
            if 'top_vendor' in patterns:
                report += f"- **Primary Vendor:** {patterns['top_vendor']}\n"
            report += "\n"
        
        # Anomalies
        if financial_metrics.anomalies:
            report += "### Anomalies and Alerts\n\n"
            for anomaly in financial_metrics.anomalies:
                report += f"- ⚠️ {anomaly}\n"
            report += "\n"
    
    # Tax analysis section
    if tax_summary:
        report += f"""## Tax Analysis

### Deductible Expenses

Our tax analysis identified ${tax_summary.total_deductible_expenses:,.2f} in potentially deductible business expenses.

"""
        
        # Business expense categories
        if tax_summary.business_expense_categories:
            report += "### Business Expense Categories\n\n"
            for category, amount in tax_summary.business_expense_categories.items():
                report += f"- **{category.replace('_', ' ').title()}:** ${amount:,.2f}\n"
            report += "\n"
        
        # Tax optimization suggestions
        if tax_summary.tax_optimization_suggestions:
            report += "### Tax Optimization Recommendations\n\n"
            for suggestion in tax_summary.tax_optimization_suggestions:
                report += f"- 💡 {suggestion}\n"
            report += "\n"
        
        # Compliance warnings
        if tax_summary.compliance_warnings:
            report += "### Compliance Considerations\n\n"
            for warning in tax_summary.compliance_warnings:
                report += f"- ⚠️ {warning}\n"
            report += "\n"
    
    # Business insights
    if financial_metrics and financial_metrics.detected_business_types:
        report += f"""## Business Intelligence

### Business Type Analysis

Based on transaction patterns, this appears to be a **{', '.join(financial_metrics.detected_business_types)}** business.

"""
    
    # Recommendations section
    report += f"""## Strategic Recommendations

### Financial Management
1. **Cash Flow Optimization:** {'Monitor seasonal variations in revenue' if len(transactions) > 50 else 'Establish consistent revenue tracking'}
2. **Expense Control:** {'Review high-expense categories for optimization opportunities' if financial_metrics and financial_metrics.total_expenses > 1000 else 'Implement expense tracking best practices'}
3. **Tax Planning:** {'Maximize deductible business expenses' if tax_summary and tax_summary.total_deductible_expenses > 500 else 'Establish tax record-keeping procedures'}

### Process Improvements
1. **Data Quality:** {'Maintain current high data quality standards' if data_quality_score and data_quality_score > 80 else 'Improve transaction record consistency and completeness'}
2. **Automation:** Consider implementing automated expense categorization for improved efficiency
3. **Reporting:** Establish regular financial reporting cycles for better business insights

## Conclusion

This analysis provides a comprehensive overview of your financial position and identifies key opportunities for optimization. The Ashworth Engine's AI-powered insights enable data-driven decision making for sustainable business growth.

### Next Steps
1. Review and implement recommended optimizations
2. Establish regular monitoring of key financial metrics
3. Consider quarterly analysis cycles for ongoing optimization

---

*This report was generated by Ashworth Engine v2 - AI-Powered Financial Intelligence Platform*  
*For questions or additional analysis, contact your financial advisor.*
"""
    
    return report
        
    except Exception as e:
        logger.log_agent_activity(
            "report_generator", "generation_failed", trace_id,
            error=str(e)
        )
        return {
            "error_messages": [f"Report generator error: {str(e)}"],
            "workflow_phase": "report_generation_failed"
        }